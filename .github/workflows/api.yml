name: Deploy API to Amazon ECS

on:
  push:
    branches:
      - development
      - staging
  release:
    types: [ created ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: artwallst/api
  DEVELOPMENT_ECS_SERVICE: development-api-service
  DEVELOPMENT_ECS_CLUSTER: development-cluster
  DEVELOPMENT_ECS_TASK_DEFINITION: awst-infra/templates/development/task_definition/api.json
  DEVELOPMENT_CONTAINER_NAME: development-api-container
  STAGING_ECS_SERVICE: staging-api-service
  STAGING_ECS_CLUSTER: staging-cluster
  STAGING_ECS_TASK_DEFINITION: awst-infra/templates/staging/task_definition/api.json
  STAGING_CONTAINER_NAME: staging-api-container
  PRODUCTION_ECS_SERVICE: production-api-service
  PRODUCTION_ECS_CLUSTER: production-cluster
  PRODUCTION_ECS_TASK_DEFINITION: awst-infra/templates/production/task_definition/api.json
  PRODUCTION_CONTAINER_NAME: production-api-container

defaults:
  run:
    shell: bash

jobs:
  build-publish:
    name: Build and Publish to ECR
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          mask-aws-account-id: 'no'

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: API-v2-1
          template: 3-microservices/infrastructure/ecs.yml
          no-fail-on-empty-changeset: "1"

  deploy-development:
    name: Deploy To Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    environment: 'Development'
    needs: build-publish
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}

      - name: Run app deployment
        id: app-deployment
        env:
          REGION: ${{ env.AWS_REGION }}
        run: |
          ./3-microservices/deploy.sh $REGION $DEVELOPMENT_ECS_SERVICE

  deploy-staging:
    name: Deploy To Staging
    runs-on: ubuntu-latest
    environment: 'Staging'
    if: github.ref == 'refs/heads/staging'
    # needs: [build-publish, deploy-development]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          mask-aws-account-id: 'no'

      - name: Run app deployment
        id: app-deployment
        env:
          REGION: ${{ env.AWS_REGION }}
        run: |
          ./3-microservices/deploy.sh $REGION $DEVELOPMENT_ECS_SERVICE

  deploy-production:
    name: Deploy To Production
    runs-on: ubuntu-latest
    environment: 'Production'
    if: github.ref == 'refs/heads/production'
    # needs: [build-publish, deploy-staging]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          mask-aws-account-id: 'no'

      - name: Run app deployment
        id: app-deployment
        env:
          REGION: ${{ env.AWS_REGION }}
        run: |
          ./3-microservices/deploy.sh $REGION $DEVELOPMENT_ECS_SERVICE