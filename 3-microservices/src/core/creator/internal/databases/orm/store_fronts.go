// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StoreFront is an object representing the database table.
type StoreFront struct {
	ID                            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	StoreName                     string      `boil:"store_name" json:"store_name" toml:"store_name" yaml:"store_name"`
	StoreURL                      string      `boil:"store_url" json:"store_url" toml:"store_url" yaml:"store_url"`
	StoreLogoFilename             string      `boil:"store_logo_filename" json:"store_logo_filename" toml:"store_logo_filename" yaml:"store_logo_filename"`
	StorefrontBannerVideoFilename null.String `boil:"storefront_banner_video_filename" json:"storefront_banner_video_filename,omitempty" toml:"storefront_banner_video_filename" yaml:"storefront_banner_video_filename,omitempty"`
	StorefrontTitleHeader         null.String `boil:"storefront_title_header" json:"storefront_title_header,omitempty" toml:"storefront_title_header" yaml:"storefront_title_header,omitempty"`
	StorefrontSubHeader           null.String `boil:"storefront_sub_header" json:"storefront_sub_header,omitempty" toml:"storefront_sub_header" yaml:"storefront_sub_header,omitempty"`
	PromotionalMessage            null.String `boil:"promotional_message" json:"promotional_message,omitempty" toml:"promotional_message" yaml:"promotional_message,omitempty"`
	CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatorID                     null.Int64  `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`

	R *storeFrontR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeFrontL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreFrontColumns = struct {
	ID                            string
	StoreName                     string
	StoreURL                      string
	StoreLogoFilename             string
	StorefrontBannerVideoFilename string
	StorefrontTitleHeader         string
	StorefrontSubHeader           string
	PromotionalMessage            string
	CreatedAt                     string
	UpdatedAt                     string
	CreatorID                     string
}{
	ID:                            "id",
	StoreName:                     "store_name",
	StoreURL:                      "store_url",
	StoreLogoFilename:             "store_logo_filename",
	StorefrontBannerVideoFilename: "storefront_banner_video_filename",
	StorefrontTitleHeader:         "storefront_title_header",
	StorefrontSubHeader:           "storefront_sub_header",
	PromotionalMessage:            "promotional_message",
	CreatedAt:                     "created_at",
	UpdatedAt:                     "updated_at",
	CreatorID:                     "creator_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var StoreFrontWhere = struct {
	ID                            whereHelperint64
	StoreName                     whereHelperstring
	StoreURL                      whereHelperstring
	StoreLogoFilename             whereHelperstring
	StorefrontBannerVideoFilename whereHelpernull_String
	StorefrontTitleHeader         whereHelpernull_String
	StorefrontSubHeader           whereHelpernull_String
	PromotionalMessage            whereHelpernull_String
	CreatedAt                     whereHelpertime_Time
	UpdatedAt                     whereHelpertime_Time
	CreatorID                     whereHelpernull_Int64
}{
	ID:                            whereHelperint64{field: "\"store_fronts\".\"id\""},
	StoreName:                     whereHelperstring{field: "\"store_fronts\".\"store_name\""},
	StoreURL:                      whereHelperstring{field: "\"store_fronts\".\"store_url\""},
	StoreLogoFilename:             whereHelperstring{field: "\"store_fronts\".\"store_logo_filename\""},
	StorefrontBannerVideoFilename: whereHelpernull_String{field: "\"store_fronts\".\"storefront_banner_video_filename\""},
	StorefrontTitleHeader:         whereHelpernull_String{field: "\"store_fronts\".\"storefront_title_header\""},
	StorefrontSubHeader:           whereHelpernull_String{field: "\"store_fronts\".\"storefront_sub_header\""},
	PromotionalMessage:            whereHelpernull_String{field: "\"store_fronts\".\"promotional_message\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"store_fronts\".\"created_at\""},
	UpdatedAt:                     whereHelpertime_Time{field: "\"store_fronts\".\"updated_at\""},
	CreatorID:                     whereHelpernull_Int64{field: "\"store_fronts\".\"creator_id\""},
}

// StoreFrontRels is where relationship names are stored.
var StoreFrontRels = struct {
}{}

// storeFrontR is where relationships are stored.
type storeFrontR struct {
}

// NewStruct creates a new relationship struct
func (*storeFrontR) NewStruct() *storeFrontR {
	return &storeFrontR{}
}

// storeFrontL is where Load methods for each relationship are stored.
type storeFrontL struct{}

var (
	storeFrontAllColumns            = []string{"id", "store_name", "store_url", "store_logo_filename", "storefront_banner_video_filename", "storefront_title_header", "storefront_sub_header", "promotional_message", "created_at", "updated_at", "creator_id"}
	storeFrontColumnsWithoutDefault = []string{"store_name", "store_url", "store_logo_filename", "storefront_banner_video_filename", "storefront_title_header", "storefront_sub_header", "promotional_message", "creator_id"}
	storeFrontColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	storeFrontPrimaryKeyColumns     = []string{"id"}
)

type (
	// StoreFrontSlice is an alias for a slice of pointers to StoreFront.
	// This should generally be used opposed to []StoreFront.
	StoreFrontSlice []*StoreFront
	// StoreFrontHook is the signature for custom StoreFront hook methods
	StoreFrontHook func(context.Context, boil.ContextExecutor, *StoreFront) error

	storeFrontQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeFrontType                 = reflect.TypeOf(&StoreFront{})
	storeFrontMapping              = queries.MakeStructMapping(storeFrontType)
	storeFrontPrimaryKeyMapping, _ = queries.BindMapping(storeFrontType, storeFrontMapping, storeFrontPrimaryKeyColumns)
	storeFrontInsertCacheMut       sync.RWMutex
	storeFrontInsertCache          = make(map[string]insertCache)
	storeFrontUpdateCacheMut       sync.RWMutex
	storeFrontUpdateCache          = make(map[string]updateCache)
	storeFrontUpsertCacheMut       sync.RWMutex
	storeFrontUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storeFrontBeforeInsertHooks []StoreFrontHook
var storeFrontBeforeUpdateHooks []StoreFrontHook
var storeFrontBeforeDeleteHooks []StoreFrontHook
var storeFrontBeforeUpsertHooks []StoreFrontHook

var storeFrontAfterInsertHooks []StoreFrontHook
var storeFrontAfterSelectHooks []StoreFrontHook
var storeFrontAfterUpdateHooks []StoreFrontHook
var storeFrontAfterDeleteHooks []StoreFrontHook
var storeFrontAfterUpsertHooks []StoreFrontHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StoreFront) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StoreFront) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StoreFront) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StoreFront) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StoreFront) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StoreFront) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StoreFront) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StoreFront) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StoreFront) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFrontAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreFrontHook registers your hook function for all future operations.
func AddStoreFrontHook(hookPoint boil.HookPoint, storeFrontHook StoreFrontHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		storeFrontBeforeInsertHooks = append(storeFrontBeforeInsertHooks, storeFrontHook)
	case boil.BeforeUpdateHook:
		storeFrontBeforeUpdateHooks = append(storeFrontBeforeUpdateHooks, storeFrontHook)
	case boil.BeforeDeleteHook:
		storeFrontBeforeDeleteHooks = append(storeFrontBeforeDeleteHooks, storeFrontHook)
	case boil.BeforeUpsertHook:
		storeFrontBeforeUpsertHooks = append(storeFrontBeforeUpsertHooks, storeFrontHook)
	case boil.AfterInsertHook:
		storeFrontAfterInsertHooks = append(storeFrontAfterInsertHooks, storeFrontHook)
	case boil.AfterSelectHook:
		storeFrontAfterSelectHooks = append(storeFrontAfterSelectHooks, storeFrontHook)
	case boil.AfterUpdateHook:
		storeFrontAfterUpdateHooks = append(storeFrontAfterUpdateHooks, storeFrontHook)
	case boil.AfterDeleteHook:
		storeFrontAfterDeleteHooks = append(storeFrontAfterDeleteHooks, storeFrontHook)
	case boil.AfterUpsertHook:
		storeFrontAfterUpsertHooks = append(storeFrontAfterUpsertHooks, storeFrontHook)
	}
}

// One returns a single storeFront record from the query.
func (q storeFrontQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StoreFront, error) {
	o := &StoreFront{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for store_fronts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StoreFront records from the query.
func (q storeFrontQuery) All(ctx context.Context, exec boil.ContextExecutor) (StoreFrontSlice, error) {
	var o []*StoreFront

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to StoreFront slice")
	}

	if len(storeFrontAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StoreFront records in the query.
func (q storeFrontQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count store_fronts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeFrontQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if store_fronts exists")
	}

	return count > 0, nil
}

// StoreFronts retrieves all the records using an executor.
func StoreFronts(mods ...qm.QueryMod) storeFrontQuery {
	mods = append(mods, qm.From("\"store_fronts\""))
	return storeFrontQuery{NewQuery(mods...)}
}

// FindStoreFront retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStoreFront(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*StoreFront, error) {
	storeFrontObj := &StoreFront{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"store_fronts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, storeFrontObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from store_fronts")
	}

	return storeFrontObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StoreFront) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no store_fronts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeFrontColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeFrontInsertCacheMut.RLock()
	cache, cached := storeFrontInsertCache[key]
	storeFrontInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeFrontAllColumns,
			storeFrontColumnsWithDefault,
			storeFrontColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storeFrontType, storeFrontMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeFrontType, storeFrontMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"store_fronts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"store_fronts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into store_fronts")
	}

	if !cached {
		storeFrontInsertCacheMut.Lock()
		storeFrontInsertCache[key] = cache
		storeFrontInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StoreFront.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StoreFront) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storeFrontUpdateCacheMut.RLock()
	cache, cached := storeFrontUpdateCache[key]
	storeFrontUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeFrontAllColumns,
			storeFrontPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update store_fronts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"store_fronts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storeFrontPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeFrontType, storeFrontMapping, append(wl, storeFrontPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update store_fronts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for store_fronts")
	}

	if !cached {
		storeFrontUpdateCacheMut.Lock()
		storeFrontUpdateCache[key] = cache
		storeFrontUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storeFrontQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for store_fronts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for store_fronts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreFrontSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeFrontPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"store_fronts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storeFrontPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in storeFront slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all storeFront")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StoreFront) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no store_fronts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeFrontColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeFrontUpsertCacheMut.RLock()
	cache, cached := storeFrontUpsertCache[key]
	storeFrontUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storeFrontAllColumns,
			storeFrontColumnsWithDefault,
			storeFrontColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			storeFrontAllColumns,
			storeFrontPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert store_fronts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storeFrontPrimaryKeyColumns))
			copy(conflict, storeFrontPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"store_fronts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storeFrontType, storeFrontMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeFrontType, storeFrontMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert store_fronts")
	}

	if !cached {
		storeFrontUpsertCacheMut.Lock()
		storeFrontUpsertCache[key] = cache
		storeFrontUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StoreFront record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StoreFront) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no StoreFront provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storeFrontPrimaryKeyMapping)
	sql := "DELETE FROM \"store_fronts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from store_fronts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for store_fronts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeFrontQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no storeFrontQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from store_fronts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for store_fronts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreFrontSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storeFrontBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeFrontPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"store_fronts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeFrontPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from storeFront slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for store_fronts")
	}

	if len(storeFrontAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StoreFront) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStoreFront(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreFrontSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreFrontSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeFrontPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"store_fronts\".* FROM \"store_fronts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeFrontPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in StoreFrontSlice")
	}

	*o = slice

	return nil
}

// StoreFrontExists checks if the StoreFront row exists.
func StoreFrontExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"store_fronts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if store_fronts exists")
	}

	return exists, nil
}
